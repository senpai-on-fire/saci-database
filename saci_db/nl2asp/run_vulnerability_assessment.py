import os
import sys
import subprocess
import time
from dotenv import load_dotenv
from openai import OpenAI


def main():
    # Step 1: Load questions from 'questions.txt'
    questions = load_questions("questions.txt")

    # Step 2: Present the questions to the user and collect answers
    print("\nPlease answer the following questions:")
    answers = ask_questions(questions)

    # Step 3: Load instructions (mapping information) from 'instructions.txt'
    instructions = load_instructions("instructions.txt")

    # Step 4: Craft the prompt
    prompt = craft_prompt(questions, answers, instructions)

    # Load the .env file
    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("Error: OPENAI_API_KEY is not set.")
        sys.exit(1)

    # Call the OpenAI API with timing
    print("\nThinking...")
    start_time = time.time()
    client = OpenAI(api_key=api_key)
    response = call_openai_api(client, prompt)
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Thought for {elapsed_time:.2f} seconds")

    # Output the entire OpenAI response for debugging purposes
    # print("\nOpenAI API Response for debugging purposes:")
    # print(response)

    # Parse the response to extract the LP file content
    lp_file_content = parse_response(response)

    # Save the response as 'facts.lp'
    with open("facts.lp", "w") as f:
        f.write(lp_file_content)

    # Step 5: Run clingo with both .lp files
    print("\nRunning clingo with the provided .lp files...")
    run_clingo(["vulnerability.lp", "facts.lp"])


def load_questions(filename):
    try:
        with open(filename, "r") as f:
            questions = [line.strip() for line in f if line.strip()]
        return questions
    except FileNotFoundError:
        print(f"Error: {filename} not found.")
        sys.exit(1)


def ask_questions(questions):
    answers = {}
    for question in questions:
        answer = input(question + " ")
        answers[question] = answer
    return answers


def load_instructions(filename):
    try:
        with open(filename, "r") as f:
            instructions = f.read()
        return instructions
    except FileNotFoundError:
        print(f"Error: {filename} not found.")
        sys.exit(1)


def craft_prompt(questions, answers, instructions):
    # Combine questions and answers
    qa_pairs = ""
    for question in questions:
        answer = answers.get(question, "")
        qa_pairs += f"Question: {question}\nAnswer: {answer}\n\n"

    prompt = f"""
Given the following mapping information:

{instructions}

And the user's responses:

{qa_pairs}

Please:

1. Generate an .lp file (for Answer Set Programming) that encodes the user's answers as facts.

2. Ensure that the atoms correspond to the mapping provided.

Please format your response as follows:

===BEGIN_LP_FILE===
[Your .lp file content here]
===END_LP_FILE===
"""
    return prompt


def call_openai_api(client, prompt):
    try:
        response = client.chat.completions.create(
            model="o1-preview", messages=[{"role": "user", "content": prompt}]
        )
        # Return the assistant's reply
        return response.choices[0].message.content
    except Exception as e:
        print("An error occurred while calling the OpenAI API:", e)
        sys.exit(1)


def parse_response(response_text):
    # Extract the .lp file content, similar to Program 1
    lp_file_content = ""
    in_lp_file = False

    for line in response_text.splitlines():
        if line.strip() == "===BEGIN_LP_FILE===":
            in_lp_file = True
            continue
        elif line.strip() == "===END_LP_FILE===":
            in_lp_file = False
            continue

        if in_lp_file:
            lp_file_content += line + "\n"

    if not lp_file_content:
        print("Error: No LP file content found between markers in the OpenAI response.")
        sys.exit(1)

    return lp_file_content.strip()


def run_clingo(lp_files):
    cmd = ["clingo"] + lp_files
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        print("\nClingo output:")
        print(result.stdout)
        if result.stderr:
            print("Clingo errors:", file=sys.stderr)
            print(result.stderr, file=sys.stderr)
    except FileNotFoundError:
        print("Clingo is not installed or not found in the system path.")
    except Exception as e:
        print("An error occurred while running clingo:", e)


if __name__ == "__main__":
    main()
